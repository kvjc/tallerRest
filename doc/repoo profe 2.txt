üß† 1. Conceptos fundamentales que debes saber
‚úÖ Qu√© es una API REST
Es una forma de comunicar el cliente (como Postman o un frontend) con el servidor usando HTTP (GET, POST, PUT, DELETE).

REST tiene reglas claras: usar URLs limpias, m√©todos HTTP correctos, y respuestas con c√≥digo de estado.

‚úÖ Qu√© es un endpoint
Es una URL que responde a una solicitud.

Ejemplo: GET /api/users/5 es un endpoint que devuelve el usuario con id 5.

‚úÖ Qu√© es un DTO
Lo acabamos de ver: es un objeto intermedio entre lo que se guarda en la base de datos y lo que se env√≠a o recibe del cliente.

‚úÖ Qu√© es una entidad
Es la clase que representa una tabla en la base de datos. Tiene anotaciones como @Entity, @Id, etc.

‚úÖ Qu√© es un controlador (@RestController)
Es donde defines los endpoints. Aqu√≠ recibes las peticiones del cliente.

Usas anotaciones como:

@PostMapping, @GetMapping, @PutMapping, @DeleteMapping

@RequestBody, @PathVariable

‚úÖ Qu√© es un servicio (@Service)
Es la capa intermedia entre el controlador y el repositorio.

Aqu√≠ se pone la l√≥gica de negocio, validaciones, reglas de transformaci√≥n.

‚úÖ Qu√© es un repositorio (@Repository)
Es la capa que se conecta a la base de datos usando Spring Data JPA.

Tiene m√©todos como findById(), save(), deleteById(), etc.

‚úÖ Qu√© es un Mapper (o MapStruct)
Es quien convierte:

DTO ‚Üí Entidad

Entidad ‚Üí DTO

Puede ser manual (con c√≥digo Java) o autom√°tico (con MapStruct).

üîê 2. Spring Security y JWT
üîí Spring Security
Es el sistema de autenticaci√≥n/autorizaci√≥n que protege los endpoints.

Permite decir qui√©n puede acceder a qu√© parte de la API.

üîê JWT (JSON Web Token)
Es un token que se genera cuando un usuario se loguea.

Se env√≠a en el header Authorization:
Authorization: Bearer <token>

El servidor lo usa para verificar si el usuario est√° autenticado.

En el quiz, probablemente te den un JWT funcionando. Solo tienes que saber c√≥mo probar endpoints con Postman y qu√© endpoints requieren token.

üß™ 3. Cosas pr√°cticas que pueden ponerte
A. Probar endpoints con Postman:
Enviar un POST con un JSON en el body.

Enviar un token JWT en los headers.

Ver que un GET /api/elemento/{id} devuelva el objeto correcto.

B. Crear un nuevo endpoint
Agregar un nuevo m√©todo en un @RestController.

Usar @RequestBody, @PathVariable.

C. Agregar un DTO y usar un Mapper
Crear InDTO y OutDTO.

Hacer el mapper (con MapStruct o manual).

Usarlo en el controlador.

D. Agregar l√≥gica en el servicio
Crear un m√©todo que hace algo especial (ej. filtrar o calcular).

Llamarlo desde el controlador.

E. Validar la seguridad
Probar que un endpoint sin token da 401.

Probar que con el token correcto accedes.

üìÅ 4. Ejemplo de estructura que te pueden dar
Sup√≥n que te dan un contexto de "Cl√≠nica y pacientes" (en lugar de proyectos y tareas):

markdown
Copiar
Editar
- model
   - Patient.java
- dto
   - patient
       - PatientInDTO.java
       - PatientOutDTO.java
- repository
   - PatientRepository.java
- service
   - IPatientService.java
   - PatientServiceImpl.java
- controller
   - rest
       - PatientRestController.java
- mapper
   - PatientMapper.java
Lo que podr√≠as tener que hacer:

Crear un endpoint GET /api/patients

Crear un DTO nuevo

A√±adir l√≥gica de negocio en PatientServiceImpl

Asegurar el endpoint con JWT

Probarlo en Postman

‚úÖ Recomendaci√≥n: cosas que s√≠ debes saber hacer t√∫ solo
Crear un controlador REST con los m√©todos b√°sicos (CRUD).

Crear DTOs y un mapper.

Usar @Autowired o constructor para inyectar servicios.

Saber usar Optional, ResponseEntity, @PathVariable, @RequestBody.

Probar endpoints en Postman (con y sin JWT).

Leer errores en consola para ver si falta algo en Spring Security o DTO.